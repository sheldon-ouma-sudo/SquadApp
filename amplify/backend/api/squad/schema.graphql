type RequestToBeAddedInASquad @model @auth(rules: [{ allow: public }]) {
  id: ID!
  User: User @hasOne
  notificationID: ID! @index(name: "byNotification")
}

type RequestToJoinASquad @model @auth(rules: [{ allow: public }]) {
  id: ID!
  User: User @hasOne
  Squads: [Squad] @manyToMany(relationName: "RequestToJoinASquadSquad")
  notificationID: ID! @index(name: "byNotification")
  message: String
}

type Notification @model @auth(rules: [{ allow: public }]) {
  id: ID!
  pollRequestsArray: [String]
  pollResponsesArray: [String]
  pollCommentsArray: [String]
  pollLikeResponseArray: [String]
  squadAddRequestsArray: [String]
  SquadJoinRequestArray: [String]
  PollComments: [PollComment]
    @hasMany(indexName: "byNotification", fields: ["id"])
  PollRequests: [PollRequest]
    @hasMany(indexName: "byNotification", fields: ["id"])
  userID: ID! @index(name: "byUser")
  new: Boolean
  RequestToBeAddedInASquads: [RequestToBeAddedInASquad]
    @hasMany(indexName: "byNotification", fields: ["id"])
  RequestToJoinASquads: [RequestToJoinASquad]
    @hasMany(indexName: "byNotification", fields: ["id"])
}

type PollResponse @model @auth(rules: [{ allow: public }]) {
  id: ID!
  pollID: ID! @index(name: "byPoll")
  userID: ID! @index(name: "byUser")
  caption: String
}

type PollRequest @model @auth(rules: [{ allow: public }]) {
  id: ID!
  Poll: Poll @belongsTo
  ParentPollID: String
  userID: ID! @index(name: "byUser")
  pollRequestsId: [String]
  responseStatus: Boolean
  notificationID: ID! @index(name: "byNotification")
}

type PollComment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  pollID: ID! @index(name: "byPoll")
  userID: ID! @index(name: "byUser")
  numOfLikes: Int
  notificationID: ID! @index(name: "byNotification")
  User: User @belongsTo(fields: ["userID"])
  Poll: Poll @belongsTo(fields: ["pollID"])
  comment: String
}

type Poll @model @auth(rules: [{ allow: public }]) {
  id: ID!
  totalNumOfVotes: Int
  pollMedia: [String]
  closed: Boolean
  open: Boolean
  userID: ID! @index(name: "byUser")
  numOfLikes: Int
  pollAudience: [String]
  pollCaption: String
  pollLabel: String
  pollScore: Int
  superPoll: Boolean
  pollCommentArray: [String]
  squadID: String
  pollItems: [AWSJSON]
  PollComments: [PollComment] @hasMany(indexName: "byPoll", fields: ["id"])
  PollRequest: PollRequest @hasOne
  PollResponses: [PollResponse] @hasMany(indexName: "byPoll", fields: ["id"])
  squads: [Squad] @manyToMany(relationName: "SquadPoll")
}

type Squad @model @auth(rules: [{ allow: public }]) {
  id: ID!
  Users: [User] @manyToMany(relationName: "SquadUser")
  authUserID: String
  authUserName: String
  bio: String
  public: Boolean
  squadName: String
  numOfPolls: Int
  Polls: [Poll] @manyToMany(relationName: "SquadPoll")
  requesttojoinsquads: [RequestToJoinASquad]
    @manyToMany(relationName: "RequestToJoinASquadSquad")
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  userName: String
  imageUrl: String
  userPrimarySquad: [String]
  nonPrimarySquadsCreated: [String]
  numOfPolls: Int
  numOfSquadJoined: Int
  numSquadCreated: Int
  superUser: Boolean
  userProfilePicture: String
  userInterests: [String]
  Bio: String
  Polls: [Poll] @hasMany(indexName: "byUser", fields: ["id"])
  PollComments: [PollComment] @hasMany(indexName: "byUser", fields: ["id"])
  PollRequests: [PollRequest] @hasMany(indexName: "byUser", fields: ["id"])
  PollResponses: [PollResponse] @hasMany(indexName: "byUser", fields: ["id"])
  squadJoined: [String]
  Notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
  squads: [Squad] @manyToMany(relationName: "SquadUser")
}
